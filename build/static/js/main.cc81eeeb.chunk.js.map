{"version":3,"sources":["libs/shortid/lib/alphabet.js","components/Contact/cavatar.png","libs/shortid/index.js","libs/shortid/lib/index.js","libs/shortid/lib/random/random-from-seed.js","libs/shortid/lib/build.js","libs/shortid/lib/generate.js","libs/shortid/lib/random/random-byte-browser.js","libs/shortid/lib/is-valid.js","libs/shortid/lib/util/cluster-worker-id-browser.js","utils/utils.js","components/UserInfo/UserInfo.jsx","apiRequests.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Message/Message.jsx","components/MessageBox/MessageBox.jsx","components/MessageList/MessageList.jsx","components/Forms/forms.jsx","App.js","components/Login/login.jsx","serviceWorker.js","components/NotFound/Notfound.js","index.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","REDUCE_TIME","version","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","id","RegExp","replace","test","Utils","isAuthorized","localStorage","getItem","validateResponse","response","contentType","headers","content","data","indexOf","responseCode","UserInfo","props","getAppKey","appKey","Requests","login","bodyFormData","axios","method","url","config","then","setItem","console","log","catch","getForms","error","getFormSubmissions","formID","Contact","className","src","alt","height","width","contact","ContactList","state","contacts","ID","forms","location","this","getNamesFromSubmissions","submissionData","emails","getContacts","forEach","submission","fields","answers","Object","values","value","String","answer","match","Set","email","setState","map","React","Component","Message","messages","message","key","shortid","time","defaultProps","MessageBox","keyPress","bind","e","date","moment","enterHandler","target","type","onKeyPress","MessageList","storeMessages","messageInput","currentTime","Forms","title","setForms","formData","form","to","pathname","formTitle","App","reload","Login","handleChange","username","password","name","FormData","append","href","placeholder","onChange","onClick","Boolean","hostname","Notfound","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc81eeeb.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","module.exports = __webpack_public_path__ + \"static/media/cavatar.1de9dd27.png\";","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","const Utils = {\n\n  isAuthorized() {\n    if (!window.localStorage.getItem('appKey')) {\n      return false;\n    }\n    return true;\n  },\n\n  validateResponse(response) {\n    const contentType = response.headers['content-type'];\n    const { content } = response.data;\n\n    if (contentType && contentType.indexOf('application/json') !== -1) {\n      if (response.data.responseCode === 200) {\n        if (content !== []) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n\n};\n\n\nexport default Utils;\n","import React from 'react';\n\nconst UserInfo = (props) => null;\n\nexport default UserInfo;\n","import axios from 'axios';\nimport Utils from './utils/utils';\n\nfunction getAppKey() {\n  const appKey = localStorage.getItem('appKey');\n\n  if (appKey) {\n    return appKey;\n  }\n\n  return false;\n}\n\nconst Requests = {\n\n  async login(bodyFormData) {\n    const data = [];\n\n    await axios({\n      method: 'post',\n      url: 'https://api.jotform.com//user/login',\n      data: bodyFormData,\n      config: {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          // eslint-disable-next-line quote-props\n        },\n      },\n    })\n      .then((response) => {\n        if (Utils.validateResponse(response) !== false) {\n          data.push(response);\n          localStorage.setItem('appKey', response.data.content.appKey);\n          console.log('asdjhbasdkjhasbdjkhasbduhsad');\n        }\n      })\n      .catch((response) => { });\n\n    return data[0];\n  },\n\n\n  async getForms() {\n    if (getAppKey()) {\n      const data = [];\n      await axios.get(`https://api.jotform.com/user/forms?apikey=${getAppKey()}&orderby=id`)\n        .then((response) => {\n          console.log(response);\n          data.push(response);\n        })\n        .catch((error) => {\n          console.log(error);\n          data.push(error);\n        });\n\n      return data;\n    }\n    return false;\n  },\n\n  async getFormSubmissions(formID) {\n    if (getAppKey()) {\n      const data = [];\n      await axios.get(`https://api.jotform.com/form/${formID}/submissions?apikey=${getAppKey()}`)\n        .then((response) => {\n          console.log('SUBMISSION RESPONSE', response);\n          data.push(response);\n        })\n        .catch((error) => {\n          console.log(error);\n          data.push(error);\n        });\n\n      return data[0];\n    }\n\n    return false;\n  },\n\n};\n\n\nexport default Requests;\n","import React from 'react';\nimport './cavatar.png';\n\nfunction Contact(props) {\n  return (\n    <div>\n      <div className=\"contactInfo\">\n        <img src={require('./cavatar.png')} alt=\"\" height=\"50\" width=\"50\" />\n        <span className=\"contactName\">{props.contact}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport Requests from '../../apiRequests';\nimport Contact from '../Contact/Contact';\n\nclass ContactList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      ID: [],\n    };\n    if (props.forms.location.state !== undefined) {\n      this.state.ID = props.forms.location.state.formID;\n    }\n  }\n\n  componentDidMount() {\n    this.getNamesFromSubmissions();\n  }\n\n  async getContacts() {\n    const submissionData = await Requests.getFormSubmissions(this.state.ID);\n    if (submissionData !== false) {\n      return submissionData.data.content;\n    }\n  }\n\n  async getNamesFromSubmissions() {\n    let emails = [];\n\n    const submissionData = await this.getContacts();\n\n    if (submissionData !== undefined) {\n      submissionData.forEach((submission) => {\n        const fields = submission.answers;\n        const values = Object.values(fields);\n        values.forEach((value) => {\n          if (String(value.answer).match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi) && value.answer !== undefined) {\n            emails.push(value.answer);\n          }\n        });\n      });\n      // Removing duplicates\n      emails = [...new Set(emails)];\n\n      emails.forEach((email) => {\n        this.setState({\n          contacts: [...this.state.contacts,\n            email,\n          ],\n        });\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.contacts.map((contact) => (\n          <Contact contact={contact} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from '../../libs/shortid';\n\nconst Message = (props) => (\n  <div className=\"middleRightDiv\">\n    {props.messages.map((message) => (\n      <div className=\"userMessage\" key={shortid.generate()}>\n        <p>{message.message}</p>\n        <span>{message.time}</span>\n      </div>\n    ))}\n  </div>\n);\n\nMessage.defaultProps = {\n  messages: {\n    message: 'New Message',\n    time: '00:00',\n  },\n};\n\nMessage.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Message;\n","import React from 'react';\nimport moment from 'moment';\n\nclass MessageBox extends React.Component {\n  constructor({ props }) {\n    super(props);\n    this.keyPress = this.keyPress.bind(this);\n  }\n\n  keyPress(e) {\n    if (e.key === 'Enter') {\n      const date = moment().format('HH:mm');\n      this.props.enterHandler(e.target.value, date);\n\n      e.target.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"newMessageDiv\">\n        <span className=\"newMessage\">\n          <input type=\"text\" onKeyPress={this.keyPress} />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default MessageBox;\n","import React from 'react';\nimport Message from '../Message/Message';\nimport MessageBox from '../MessageBox/MessageBox';\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.storeMessages = this.storeMessages.bind(this);\n    this.state = {\n      messages: [],\n    };\n  }\n\n\n  storeMessages(messageInput, currentTime) {\n    this.setState({\n      messages: [...this.state.messages, { message: messageInput, time: currentTime }],\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"messageList\">\n        <div className=\"contactMessage\">\n          <p>Dummy message from ...</p>\n          <span>10:30</span>\n        </div>\n        <Message messages={this.state.messages} />\n        <MessageBox enterHandler={this.storeMessages} />\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Utils from '../../utils/utils';\nimport Requests from '../../apiRequests';\n\nclass Forms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forms: [],\n      title: 'Please select a form',\n    };\n  }\n\n  componentDidMount() {\n    Utils.isAuthorized();\n    this.setForms();\n  }\n\n  async setForms() {\n    const formData = await Requests.getForms();\n\n    if (formData !== false) {\n      this.setState({\n        forms: [...formData[0].data.content],\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"navbar\">\n        <div className=\"dropdown\">\n          <div className=\"formInfo\">\n            <button type=\"button\">\n              <h1>{this.state.title}</h1>\n            </button>\n          </div>\n          <div className=\"dropdown-content\">\n            {this.state.forms.map((form) => (\n              <div>\n                <Link\n                  to={{\n                    pathname: '/home',\n                    state: {\n                      formID: form.id,\n                      formTitle: form.title,\n                    },\n                  }}\n                >\n                  {form.title}\n                </Link>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n} export default Forms;\n","import React from 'react';\nimport './App.css';\nimport { Redirect } from 'react-router-dom';\nimport Utils from './utils/utils';\nimport UserInfo from './components/UserInfo/UserInfo';\nimport ContactList from './components/ContactList/ContactList';\nimport MessageList from './components/MessageList/MessageList';\nimport Forms from './components/Forms/forms';\n\nclass App extends React.Component {\n  componentDidUpdate() {\n    window.location.reload();\n  }\n\n  render() {\n    if (!Utils.isAuthorized()) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div className=\"container\">\n        <header className=\"App-header\">\n          <Forms forms={this.props} />\n        </header>\n        <div className=\"topDiv\">\n          <UserInfo />\n          <div className=\"topRight\" />\n        </div>\n        <div className=\"middleDiv\">\n          <div className=\"middleLeftDiv\">\n            <ContactList forms={this.props} />\n          </div>\n          <MessageList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport Requests from '../../apiRequests';\n\nclass Login extends React.Component {\n  constructor({ props }) {\n    super(props);\n\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      username: '',\n      password: '',\n    };\n  }\n\n  async componentDidMount() {\n    // Utils.isAuthorized();\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  async login() {\n    const bodyFormData = new FormData();\n\n    bodyFormData.append('username', this.state.username);\n\n    bodyFormData.append('password', this.state.password);\n\n    bodyFormData.append('appName', 'ChatApp');\n\n    const response = await Requests.login(bodyFormData);\n    console.log('Login response: ', response);\n\n    console.log(response);\n\n    window.location.href = '/home';\n  }\n\n  render() {\n    return (\n      <div className=\"loginDiv\">\n        <input\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"Enter username here...\"\n          value={this.state.username}\n          onChange={this.handleChange}\n        />\n\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Enter password here...\"\n          value={this.state.password}\n          onChange={this.handleChange}\n        />\n\n        <button type=\"button\" onClick={this.login}>LOGIN</button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Notfound = () => <h1>Page Not found</h1>;\n\nexport default Notfound;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Route, BrowserRouter as Router, Switch,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './components/Login/login';\n\nimport * as serviceWorker from './serviceWorker';\nimport Notfound from './components/NotFound/Notfound';\n\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <Route exact path=\"/home\" component={App} />\n      <Route component={Notfound} />\n    </Switch>\n  </Router>\n);\nReactDOM.render(routing, document.getElementById('root'));\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}